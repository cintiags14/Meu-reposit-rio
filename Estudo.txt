

ISO/IEC 9126 nrma ISO para qualidade de produto de software.

ela define um conjunto de parâmetros como objetivo de padronizar a avaliação da qualidade de software.


A norma ISO/IEC 9126, ou conjunto de normas que tratam deste assunto no âmbito da ISO, estabelece um modelo de qualidade com os seguintes componentes:

Processo de desenvolvimento, cuja qualidade afeta a qualidade do produto de software gerado e é influenciado pela natureza do produto desenvolvido;
Produto, compreendendo os atributos de qualidade do produto (sistema) de software. Estes atributos de qualidade podem ser divididos entre atributos internos e externos. Estes se diferenciam pela forma como são aferidos (interna ou externamente ao produto de software) e em conjunto compõem a qualidade do produto de software em si;
Qualidade em uso que consiste na aferição da qualidade do software em cada contexto específico de usuário. Esta é, também, a qualidade percebida pelo usuário.

A norma 9126 foca na qualidade do produto de software, propondo Atributos de Qualidade, distribuídos em seis características principais, com cada uma delas divididas em sub-características, conforme podemos ver na figura abaixo:

*funcionalidade

*confiabilidade

*Usabilidade

*Eficiência

*Manutenibilidade

*Portabilidade

Cada característica/sub-característica compõe um Atributo de Qualidade do software.




classes de equivalencia : Existem diversas técnicas para agrupar e otimizar os casos de teste, afim de fazer a maior cobertura possível do sistema. Uma delas é conhecida como partição de equivalência.

Trata-se de uma técnica de testes que propõe a separação das possíveis entradas em categorias diferentes. Partições de equivalência podem ser encontradas em dados válidos e inválidos ( valores que deveriam ser rejeitados, por exemplo). As partições podem ser identificadas para valores de saída, valores relativos ao tempo ( antes ou depois de um evento), bem como valores internos ao processo.

***
Tenta reduzir o número total de casos de teste necessários, particionando as condições de entrada em um número finito de classes de equivalência. As classes de equivalência são classificadas em dois tipos: o conjunto de entradas válidas para o programa é considerado como a classe de equivalência válida e todas as outras entradas são incluídas na classe de equivalência inválida.


Teste de desempenho

*volume previsto 
*pior volume previsto





sistema de gerenciamento de banco de dados: é o conjunto de softwares responsáveis pelo gerenciamento de banco de dados, e tem como objetivo de gerenciar o acesso, a persistência, a manipulação e a organização dos dados.

SGBD: disponibiliza uma interface para que seus clientes possam incluir, alterar ou consultar dados previamente armazenados.

Banco de dados relacionais: a interface é constituidas por APIS (Interface de programação de aplicativos ) ou drivers do SGBD, que executam comandos na linguagem SQL (
Linguagem de consulta estruturada), que que executam comandos na linguagem SQL

SGBD São utilizados: Oracle, Postgres, SQL Server e MySQL.


Sobre o postgreSQL:

Hoje, o PostgreSQL é um dos SGBDs (Sistema Gerenciador de Bancos de Dados) de código aberto mais avançados, contando com recursos como:

Consultas complexas
Chaves estrangeiras
Integridade transacional
Controle de concorrência multi-versão
Suporte ao modelo híbrido objeto-relacional
Ele tem facilidade de Acesso
Gatilhos
Visões
Linguagem Procedural em várias linguagens (PL/pgSQL, PL/Python, PL/Java, PL/Perl) para Procedimentos armazenados
Indexação por texto
Estrutura para guardar dados Georeferenciados PostGIS

Caractéristicas:

Controle de Redundâncias- A redundância consiste no armazenamento de uma mesma informação em locais diferentes, provocando inconsistências. Em um Banco de Dados as informações só se encontram armazenadas em um único local, não existindo duplicação descontrolada dos dados. Quando existem replicações dos dados, estas são decorrentes do processo de armazenagem típica do ambiente Cliente-Servidor, totalmente sob controle do Banco de Dados.

2. Compartilhamento dos Dados – O SGBD deve incluir software de controle de concorrência ao acesso dos dados, garantindo em qualquer tipo de situação a escrita/leitura de dados sem erros.

3. Controle de Acesso –  O SGDB deve dispor de recursos que possibilitem selecionar a autoridade de cada usuário. Assim um usuário poderá realizar qualquer tipo de acesso, outros poderão ler alguns dados e atualizar outros e outros ainda poderão somente acessar um conjunto restrito de dados para escrita e leitura.

4. Interfaceamento – Um Banco de Dados deverá disponibilizar formas de acesso gráfico, em linguagem natural, em SQL ou ainda via menus de acesso, não sendo uma “caixa-preta” somente sendo passível de ser acessada por aplicações.

5. Esquematização – Um Banco de Dados deverá fornecer mecanismos que possibilitem a compreensão do relacionamento existentes entre as tabelas e de sua eventual manutenção.

6. Controle de Integridade – Um Banco de Dados deverá impedir que aplicações ou acessos pelas interfaces possam comprometer a integridade dos dados.

7. Backups – O SGBD deverá apresentar facilidade para recuperar falhas de hardware e software, através da existência de arquivos de “pré-imagem” ou de outros recursos automáticos, exigindo minimamente a intervenção de pessoal técnico.



Linguagem SQL / Pratica :

CHAR é muito utilizado para armazenamento de valores com comprimentos que são sempre fixos, ex: Sigla de um Estado, numeração de CEP, etc...
Pessoalmente, uso muito pouco CHAR... normalmente nos exemplos q citei acima e em colunas tipo ´flag´

no null 
char
varchar
primary key
create table

Restrições -> Os tipos de dados são uma maneira de limitar o tipo de dados que podem ser armazenados em uma tabela.
Por exemplo, em uma tabela contendo informações sobre o produto, deve haver apenas uma linha para cada número de produto.
preço numérico CHECK (preço> 0) 
);



Teste automatizado:

Teste não é qualidade

Dimensão do desenvolvimento de software.
*Funcionalidade
*Qualidade
*Prazo
*Orçamento


Tipos de teste automatizado:

*Teste de caixa branca: Teste de caixa-branca é uma técnica de teste que usa a perspectiva interna do sistema para modelar os casos de teste. No teste de software, a perspectiva interna significa basicamente o código fonte.

*Teste de caixa preta: Teste de caixa-preta é um teste de software para verificar a saída dos dados usando entradas de vários tipos.

*Teste de API: API irá interligar diversas funções em um site (por exemplo, busca de imagens, notícias, artigos, etc.) de modo a possibilitar que possam ser utilizadas em outras aplicações. O Google Maps é um dos grandes exemplos na área de APIs.

Ciclo de vida de teste: Cenário -> Planejamento -> Especificação -> Execução -> Validação -> Automação. 













 